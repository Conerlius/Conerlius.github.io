---
layout:     post
title:      "定点数开根号的性能问题"
subtitle:   " \"math\""
date:       2019-09-26 15:00:00
author:     "Conerlius"
category: 算法
keywords: Algorithm,开根,定点数,Fix64
tags:
    - Algorithm
---

开根号有两种比较常见的方式:牛顿迭代法和二分法。

## 二分法
```
public static double SqrtBinary(double value)
{
    /**二分法实现开方
     需要注意的是：
     1.初始上界是A+0.25，而不是A
     2.double型的精度DBL_EPSILON，不能随意指定
    */
    double a = 0.0, b = value + 0.25, m; // b = A 是错误的上届
    // while(b - a > 2*DBL_EPSILON){  //sometimes dead cycle when m == a or m == b.
    for (;;)
    {
        m = (b + a) / 2;
        if (m - a < DBL_EPSILON || b - m < DBL_EPSILON) break;
        if ((m * m - value) * (a * a - value) < 0) b = m;
        else a = m;
    }
    return m;
}
```

## 牛顿迭代法
```
public static double SqrtND(double value)
{
    double x0 = value + 0.25, x1, xx = x0;
    for (;;)
    {
        x1 = (x0 * x0 + value) / (2 * x0);
        if (Math.Abs(x1 - x0) <= DBL_EPSILON) break;
        if (xx == x1) break; //to break two value cycle.
        xx = x0;
        x0 = x1;
    }
    return x1;
}
```
因为本人是用unity的开发者，简单写一下测试的demo代码，看看在android上的性能表现<br>
具体的代码在[github](https://github.com/Conerlius/UnityNewFeature/tree/master/Assets/Algorithm)<br>
结合unity的`Mathf.sqrt`和`System.Math.sqrt`来测试

### 测试结果
* 在使用mono打包的情况下
> ```
> SqrtBinary 耗时=> 2486800
> SqrtND 耗时=> 1400908
> Mathf.Sqrt 耗时=> 222906
> Math.Sqrt 耗时=> 192895
> =======================
> SqrtBinary 耗时=> 2574513
> SqrtND 耗时=> 1401643
> Mathf.Sqrt 耗时=> 212643
> Math.Sqrt 耗时=> 182390
> =======================
> SqrtBinary 耗时=> 2504743
> SqrtND 耗时=> 1395411
> Mathf.Sqrt 耗时=> 213225
> Math.Sqrt 耗时=> 181148
> =======================
> ```
> 
> 在每轮20W次的情况下，执行三轮，发现`Math.Sqrt > Mathf.Sqrt > SqrtND > SqrtBinary`,C#的math是最高效的，查看`Mathf.sqrt`后，可以看到unity的`mathf`对数据进行了多次类型转换，故`mathf`的消耗比`math`要打属正常。

* 在使用il2cpp打包的情况下
> ```
> SqrtBinary 耗时=> 1744842
> SqrtND 耗时=> 430589
> Mathf.Sqrt 耗时=> 27215
> Math.Sqrt 耗时=> 49882
> =======================
> SqrtBinary 耗时=> 1770444
> SqrtND 耗时=> 433782
> Mathf.Sqrt 耗时=> 26203
> Math.Sqrt 耗时=> 49729
> =======================
> SqrtBinary 耗时=> 1693556
> SqrtND 耗时=> 429176
> Mathf.Sqrt 耗时=> 26054
> Math.Sqrt 耗时=> 50526
> =======================
> ```
> 在每轮20W次的情况下，执行三轮，发现`Mathf.Sqrt > Math.Sqrt > SqrtND > SqrtBinary`,居然是unity的`mathf`最高效，看来是unity的il2cpp做了什么不得了的事情了，后面我们在去看看原因。

## 倒数速算法
先上[wikipedia link](https://en.wikipedia.org/wiki/Fast_inverse_square_root)给大佬们看看